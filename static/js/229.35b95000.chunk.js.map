{"version":3,"file":"static/js/229.35b95000.chunk.js","mappings":"qIAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C,+KClCMC,EAAM,mCACCC,EAAM,gCACNC,EAAU,kCAAhB,SAEQC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,EAAAA,EAAAA,IAAAA,MAAf,yGAAsCC,EAAtC,+BAA4C,GAA5C,SAC2BC,MAAMD,GADjC,YACUE,EADV,QAEoBC,GAFpB,iCAGgBD,EAASE,OAHzB,gDAIUnB,QAAQT,OAAO,IAAI6B,MAAM,cAJnC,2GASO,SAASC,IACZ,OAAOP,EAAuB,GAAD,OAAIF,EAAJ,uCAAsCD,GACtE,CAEM,SAASW,EAAkBC,GAC9B,OAAOT,EAAuB,GAAD,OAAIF,EAAJ,gCAA+BD,EAA/B,iCAA2DY,EAA3D,wBAChC,CAEM,SAASC,EAAgBC,GAC5B,OAAOX,EAAuB,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,oBAAkCd,EAAlC,mBAChC,CAGM,SAASe,EAAeD,GAC3B,OAAOX,EAAuB,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,4BAA0Cd,EAA1C,mBAChC,CAGM,SAASgB,EAAiBF,GAC7B,OAAOX,EAAuB,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,4BAA0Cd,EAA1C,mBAChC,C,oDCPD,IAvBkB,SAAC,GAA6B,IAA3BiB,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QACzBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,yBACGH,EAAWI,OAAS,IACnB,wBACGJ,EAAWK,KAAI,SAAAC,GAAI,OAClB,yBACE,SAAC,KAAD,CACEC,GAAE,UAAKN,EAAUA,EAAUK,EAAKE,GAAKF,EAAKE,IAC1CC,MAAO,CAAEC,KAAMR,GAFjB,SAIGI,EAAKK,kBALDL,EAAKE,GADI,OAc7B,C,6ECDD,UAjBa,WAEX,OAA0BI,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,KAAiC3C,MAAK,SAAA4C,GACpCH,EAASG,EAAOC,QACjB,GACF,GAAE,KAGD,+BACE,SAAC,IAAD,CAAWlB,WAAYa,EAAOZ,QAAS,aAG5C,C","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","api/Fetch.js","components/FilmsList/FilmsList.jsx","pages/home/Home.jsx"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const KEY = '0e67fb79d752f59394a3aa358d9abf8d';\nexport const URL = 'https://api.themoviedb.org/3/';\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '') {\n    const response = await fetch(url);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not found'));\n}\n\n\n\nexport function fetchTrendingMovies() {\n    return fetchWithErrorHandling(`${URL}trending/movie/week?api_key=${KEY}`);\n}\n\nexport function fetchSearchMovies(querry) {\n    return fetchWithErrorHandling(`${URL}search/movie?api_key=${KEY}&language=en-US&query=${querry}&include_adult=false`);\n}\n\nexport function fetchMoviesById(FilmId) {\n    return fetchWithErrorHandling(`${URL}movie/${FilmId}?api_key=${KEY}&language=en-US`);\n}\n\n\nexport function fetchCastMovie(FilmId) {\n    return fetchWithErrorHandling(`${URL}movie/${FilmId}/credits?api_key=${KEY}&language=en-US`);\n}\n\n\nexport function fetchReviewMovie(FilmId) {\n    return fetchWithErrorHandling(`${URL}movie/${FilmId}/reviews?api_key=${KEY}&language=en-US`);\n}","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst FilmsList = ({ filmsArray, sublink }) => {\n  const location = useLocation();\n\n  return (\n    <div>\n      {filmsArray.length > 0 && (\n        <ul>\n          {filmsArray.map(film => (\n            <li key={film.id}>\n              <Link\n                to={`${sublink ? sublink + film.id : film.id}`}\n                state={{ from: location }}\n              >\n                {film.original_title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default FilmsList;\n\nFilmsList.propTypes = {\n  filmsArray: PropTypes.array.isRequired,\n  sublink: PropTypes.string,\n};\n","import { useEffect, useState } from 'react';\n\nimport FilmsList from 'components/FilmsList/FilmsList';\nimport * as filmsFetch from '../../api/Fetch';\n\n\nconst Home = () => {\n\n  const [films, setFilms] = useState([]);\n\n  useEffect(() => {\n    filmsFetch.fetchTrendingMovies().then(result => {\n      setFilms(result.results);\n    });\n  }, []);\n\n  return (\n    <>\n      <FilmsList filmsArray={films} sublink={'movies/'} />\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","KEY","URL","IMG_URL","fetchWithErrorHandling","url","fetch","response","ok","json","Error","fetchTrendingMovies","fetchSearchMovies","querry","fetchMoviesById","FilmId","fetchCastMovie","fetchReviewMovie","filmsArray","sublink","location","useLocation","length","map","film","to","id","state","from","original_title","useState","films","setFilms","useEffect","filmsFetch","result","results"],"sourceRoot":""}