{"version":3,"file":"static/js/76.77f68b50.chunk.js","mappings":"oIAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C,+KClCMC,EAAM,mCACCC,EAAM,gCACNC,EAAU,kCAAhB,SAEQC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,EAAAA,EAAAA,IAAAA,MAAf,yGAAsCC,EAAtC,+BAA4C,GAA5C,SAC2BC,MAAMD,GADjC,YACUE,EADV,QAEoBC,GAFpB,iCAGgBD,EAASE,OAHzB,gDAIUnB,QAAQT,OAAO,IAAI6B,MAAM,cAJnC,2GASO,SAASC,IACZ,OAAOP,EAAuB,GAAD,OAAIF,EAAJ,uCAAsCD,GACtE,CAEM,SAASW,EAAkBC,GAC9B,OAAOT,EAAuB,GAAD,OAAIF,EAAJ,gCAA+BD,EAA/B,iCAA2DY,EAA3D,wBAChC,CAEM,SAASC,EAAgBC,GAC5B,OAAOX,EAAuB,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,oBAAkCd,EAAlC,mBAChC,CAGM,SAASe,EAAeD,GAC3B,OAAOX,EAAuB,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,4BAA0Cd,EAA1C,mBAChC,CAGM,SAASgB,EAAiBF,GAC7B,OAAOX,EAAuB,GAAD,OAAIF,EAAJ,iBAAgBa,EAAhB,4BAA0Cd,EAA1C,mBAChC,C,2HChCD,EAA4B,wB,SCsD5B,EAhDa,WACX,OAAwBiB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,eAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACRH,EAAU,eAEVI,EAAAA,GAA0BH,GAAShC,MAAK,SAAAoC,GACtC,KAAIA,EAAMC,KAAKC,OAAS,GAKtB,OAAOP,EAAU,UAJjBF,EAAQO,EAAMC,MACdN,EAAU,WAKb,GACF,GAAE,CAACC,KAGF,2BACc,aAAXF,IACC,wBACGF,EAAKW,KAAI,SAAAC,GACR,OACE,2BACE,gBACEC,UAAWC,EACXC,IACEH,EAAKI,aACDT,EAAAA,GAAqBK,EAAKI,aAC1BC,EAENC,IAAI,UAEN,kCAAUN,EAAKO,SACf,uCAAeP,EAAKQ,eAXbR,EAAKS,GAcjB,MAGO,WAAXnB,IAAwB,8CACb,gBAAXA,IAA4B,SAACoB,EAAA,EAAD,MAGlC,C","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","api/Fetch.js","webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const KEY = '0e67fb79d752f59394a3aa358d9abf8d';\nexport const URL = 'https://api.themoviedb.org/3/';\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '') {\n    const response = await fetch(url);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not found'));\n}\n\n\n\nexport function fetchTrendingMovies() {\n    return fetchWithErrorHandling(`${URL}trending/movie/week?api_key=${KEY}`);\n}\n\nexport function fetchSearchMovies(querry) {\n    return fetchWithErrorHandling(`${URL}search/movie?api_key=${KEY}&language=en-US&query=${querry}&include_adult=false`);\n}\n\nexport function fetchMoviesById(FilmId) {\n    return fetchWithErrorHandling(`${URL}movie/${FilmId}?api_key=${KEY}&language=en-US`);\n}\n\n\nexport function fetchCastMovie(FilmId) {\n    return fetchWithErrorHandling(`${URL}movie/${FilmId}/credits?api_key=${KEY}&language=en-US`);\n}\n\n\nexport function fetchReviewMovie(FilmId) {\n    return fetchWithErrorHandling(`${URL}movie/${FilmId}/reviews?api_key=${KEY}&language=en-US`);\n}","// extracted by mini-css-extract-plugin\nexport default {\"imageCast\":\"Cast_imageCast__BV5Jb\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport * as filmsFetch from '../../api/Fetch';\nimport noPosterCUT from '../../images/no-img.png';\nimport style from './Cast.module.css';\n\nconst Cast = () => {\n  const [Cast, setCast] = useState([]);\n  const [status, setStatus] = useState('idleNothing');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setStatus('pendingLoad');\n\n    filmsFetch.fetchCastMovie(movieId).then(movie => {\n      if (movie.cast.length > 0) {\n        setCast(movie.cast);\n        setStatus('resolved');\n      }\n      else {\n        return setStatus('noInfo');\n      }\n    });\n  }, [movieId]);\n\n  return (\n    <div>\n      {status === 'resolved' && (\n        <ul>\n          {Cast.map(item => {\n            return (\n              <li key={item.id}>\n                <img\n                  className={style.imageCast}\n                  src={\n                    item.profile_path\n                      ? filmsFetch.IMG_URL + item.profile_path\n                      : noPosterCUT\n                  }\n                  alt=\"Foto\"\n                />\n                <p>Name: {item.name}</p>\n                <p>Character: {item.character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      {status === 'noInfo' && (<p>Sorry No Info Cast</p>)}\n      {status === 'pendingLoad' && <Loader />}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","KEY","URL","IMG_URL","fetchWithErrorHandling","url","fetch","response","ok","json","Error","fetchTrendingMovies","fetchSearchMovies","querry","fetchMoviesById","FilmId","fetchCastMovie","fetchReviewMovie","useState","Cast","setCast","status","setStatus","movieId","useParams","useEffect","filmsFetch","movie","cast","length","map","item","className","style","src","profile_path","noPosterCUT","alt","name","character","id","Loader"],"sourceRoot":""}